using System;
using System.Collections.Generic;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using System.IO;
using Newtonsoft.Json;
using Hjson;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Cache.Internals.Implementations;
using Mutagen.Bethesda.Plugins.Records;

namespace EnchantedVariantsGenerater
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }

        // Run Patch
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (state.ExtraSettingsDataPath == null) throw new Exception("Input Folder is null");

            List<string> enabledMods = new();
            foreach (var mod in state.LoadOrder)
            {
                if (mod.Value.Enabled)
                {
                    //if (Settings.Value.VerboseLogging)
                    Console.WriteLine("enabledmod: " + mod.Value.ModKey.ToString());
                    enabledMods.Add(mod.Value.ModKey.ToString());
                }
            }

            List<InputJSON> inputs = JSONReader.GetJSONs((Noggog.DirectoryPath)state.ExtraSettingsDataPath);

            var sortedJSONList = JSONReader.SortJSONs(inputs, enabledMods);

            /*
            var linkcache = state.LoadOrder.ToImmutableLinkCache();

            Console.WriteLine("Running Generator");
            List<Task<UnsafeThreadStuff>> tasks = new();
            foreach (var input in inputs)
            {
                tasks.Add(Task<UnsafeThreadStuff>.Factory.StartNew(() => GenerateArmor(state, config, input, linkcache)));
                tasks.Add(Task<UnsafeThreadStuff>.Factory.StartNew(() => GenerateWeapon(state, config, input, linkcache)));
            }
            Task.WaitAll(tasks.ToArray());
            Console.WriteLine("Finishing Up!");
            foreach(var task in tasks)
            {
                foreach(var weapon in task.Result.WeaponsToSet)
                {
                    state.PatchMod.Weapons.Set(weapon);
                }
                foreach (var armor in task.Result.ArmorToSet)
                {
                    state.PatchMod.Armors.Set(armor);
                }
                foreach (var leveledlist in task.Result.LeveledListsToSet)
                {
                    state.PatchMod.LeveledItems.Set(leveledlist);
                }
            }
            */
        } // End of Patching

    }
}