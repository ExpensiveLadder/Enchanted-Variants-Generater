using System;
using System.Collections.Generic;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;
using System.IO;
using Newtonsoft.Json;
using Hjson;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Plugins.Cache.Internals.Implementations;
using Mutagen.Bethesda.Plugins.Records;
using System.Reflection.Metadata;
using Mutagen.Bethesda.Oblivion;

namespace EnchantedVariantsGenerater
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;

        public static void DoError(string text)
        {
            if (Settings.Value.IgnoreErrors)
            {
                Console.WriteLine(text);
            }
            else
            {
                throw new Exception(text);
            }
        }
        public static void DoVerboseLog(string text)
        {
            if (Settings.Value.VerboseLogging)
            {
                Console.WriteLine(text);
            }
        }

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }

        // Run Patch
        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            if (state.ExtraSettingsDataPath == null) throw new Exception("Input Folder is null");

            List<string> enabledMods = new();
            foreach (var mod in state.LoadOrder)
            {
                if (mod.Value.Enabled)
                {
                    //if (Settings.Value.VerboseLogging)
                    Console.WriteLine("enabledmod: " + mod.Value.ModKey.ToString());
                    enabledMods.Add(mod.Value.ModKey.ToString());
                }
            }

            Dictionary<string, InputJSON> inputs = JSONReader.GetJSONs((Noggog.DirectoryPath)state.ExtraSettingsDataPath, enabledMods);
            Dictionary<string, EnchantmentInfo> enchantments = JSONReader.GetEnchantments(inputs);
            Dictionary<string, GroupInfo> groups = JSONReader.GetGroups(inputs, enchantments);

            WeaponGenerator.GenerateWeapons(state, groups);
            ArmorGenerator.GenerateArmors(state, groups);

        } // End of Patching
    }
}